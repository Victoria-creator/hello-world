import io
import numpy as np
import pickle
import scipy.stats as stats
import matplotlib.pyplot as plt
import csv

#
# FILE = "/Users/user/Downloads/cc.fi.300.vec"
#
#
# def load_vectors(fname):
#     fin = io.open(fname, 'r', encoding='utf-8', newline='\n', errors='ignore')
#     data = {}
#     i = 0
#     for line in fin:
#         if i < 50000:
#             tokens = line.rstrip().split(' ')
#             data[tokens[0]] = np.array(list(map(float, np.array(tokens[1:]))))
#             i += 1
#         else:
#             break
#     return data
#
#
# word2vec = load_vectors(FILE)


synonyms = {
    'Angular': ['kulmikas', 'kulma', 'terävä', 'neliö', 'vino', 'tähdenmuotoinen', 'kaksipurjeinen',
                        'teräväkärkinen', 'tasakulmainen', 'samankulmainen', 'suorakaiteen muotoinen',
                        'teräväkulmainen', 'neliömäinen', 'kolmikolkkainen', 'kolmiomainen', 'särmikäs'],
            'Round': ['pyöristää', 'pyöristää alas', 'pyöristää ylös'],

            'Bad': ['huono', 'pahaenteinen', 'uhkaava', 'ikävä', 'karhea', 'paha', 'epäonninen', 'epäonnistunut',
                    'puutteellinen',
                    'viallinen', 'virheellinen', 'rikkinäinen', 'hankala', 'vakava', 'ilkeä', 'paheellinen',
                    'huonotapainen',
                    'onneton', 'surullinen', 'tyytymätön', 'epäsuotuisa', 'haitallinen', 'vahingollinen', 'heikko',
                    'kivulias',
                    'vahingoittunut', 'huonokuntoinen', 'ei terve', 'sairas', 'mauton', 'paheksuttava', 'murrettu',
                    'lyhyt',
                    'hatara', 'kehno', 'taitamaton', 'kelvoton', 'köykäinen', 'kurja', 'surkea', 'rähjäinen', 'tökerö'],

            'Good': ['hyvä edullinen', 'hyvää tekevä', 'suotuisa', 'terveellinen', 'hyödyllinen', 'koko', 'kokonainen',
                     'täydellinen', 'täysi', 'kunnon', 'perinpohjainen', 'tarkka', 'neuvokas', 'taitava', 'terävä',
                     'älykäs',
                     'viisas', 'näpparä', 'nokkela', 'näppärä', 'tärkeä', 'läheinen', 'sikeä', 'katkeamaton',
                     'arvostettu', 'hieno',
                     'kelpo', 'melkoinen', 'reilu', 'erinomainen', 'loistava', 'ensiluokkainen', 'upea', 'mahtava',
                     'siisti',
                     'aika hyvä', 'ei hassumpi', 'kiva', 'ihana', 'ihan hyvä', 'mainio', 'hyveellinen', 'kiltti',
                     'ystävällinen',
                     'terve', 'hyväkuntoinen', 'miellyttävä', 'mukava', 'oikea', 'otollinen', 'sopiva', 'kypsä',
                     'valmis',
                     'ihailtava', 'kunnioitettava', 'kunniallinen', 'säädyllinen', 'oikeudenmukainen', 'kunniakas',
                     'rehellinen',
                     'kunnossa', 'oikein', 'tyydyttävä', 'ok', 'okei', 'hyvässä kunnossa oleva', 'luotettava',
                     'järkevä',
                     'perusteltu', 'riskitön', 'varma', 'turvallinen', 'turvattu', 'magna cum laude', 'hyvyys',
                     'hyväntahtoisuus',
                     'etu', 'hyöty'],

            'Cold': ['kylmä', 'kalsea', 'jäähtynyt', 'jäähdyttävä', 'kolea', 'jäätävä', 'jääkylmä', 'hyinen',
                     'tunteeton',
                     'kylmäverinen', 'epäinhimillinen', 'rakkaudeton', 'ynseä', 'frigidi', 'piittaamaton',
                     'välinpitämätön', 'turta',
                     'sydämetön', 'häikäilemätön', 'kylmyys', 'alhainen lämpötila', 'viileys'],

            'Hot': ['kuuma', 'polttava', 'palava', 'tulinen', 'intohimoinen', 'kiivas'],

            'Complex': ['monimutkainen', 'hämärä', 'vaikeatajuinen', 'vaikeaselkoinen', 'mutkikas', 'sekava', 'vaikea',
                        'visainen'],

            'Simple': ['yksinkertainen', 'alkukantainen', 'helppo', 'mutkaton', 'ongelmaton', 'alkeellinen',
                       'vähäpätöinen',
                       'rahvas', 'suoraviivainen', 'yksinkertainen ihminen'],

            'Cowardly': ['raukkamainen', 'pelokas', 'pelkurimainen'],

            'Brave': ['urhea', 'rohkea', 'uskalias', 'peloton', 'huimapäinen', 'vahva', 'luotettava', 'urhoollinen'],

            'Dangerous': ['vaarallinen', 'tuhoisa', 'vakava', 'ankara', 'hengenvaarallinen', 'turvaton', 'uhka',
                          'riski',
                          'riskialtis', 'uhkarohkea', 'riskaabeli', 'riskipitoinen'],

            'Secure': ['turvallinen', 'suojaisa', 'tallessa', 'luotettava', 'riskitön', 'varma', 'turvattu',
                       'hyökkäykseen sopimaton', 'kestävä'],

            'Dark': ['tumma', 'tummaihoinen', 'ei-valkoinen', 'ruskeanharmaa', 'mustahko', 'synkkä', 'väriltään tumma'],

            'Luminous': ['valoisa', 'kirkas'],

            'Difficult': ['vaikea', 'hankala', 'mutkikas', 'kiusallinen', 'vaarallinen', 'haastava', 'vaativa',
                          'työläs',
                          'hämmentävä', 'visainen', 'ongelmallinen', 'pulmallinen', 'kova', 'raskas', 'problemaattinen',
                          'rasittava', 'painava', 'monitavuinen', 'monimutkainen', 'vaikeatajuinen', 'sekava',
                          'epämukava'],

            'Easy': ['helppo', 'vaivaton', 'mukava', 'yksinkertainen', 'mutkaton', 'ongelmaton'],

            'Evil': ['paha', 'ikävä', 'vahingollinen', 'pahansuopa', 'ilkeä', 'julma', 'pahantahtoinen', 'huono',
                     'karhea',
                     'tuhoisa', 'ankara', 'hengenvaarallinen', 'tiukka', 'hankala', 'hirvittävä', 'hirmuinen', 'hirveä',
                     'paheellinen', 'inhottava', 'katala', 'kauhea', 'häijy', 'kamala', 'syntinen', 'jumalaton',
                     'epämoraalinen',
                     'pahuus'],

            'Benign': ['hyvänlaatuinen', 'laatu', 'laadukkuus', 'hyvälaatuinen', 'laadukas'],

            'Faded': ['haalistuneet', 'kalpea', 'himmeä'],

            'Bright': ['kirkas', 'valoisa', 'loistava', 'säteilevä', 'hohtava', 'leimuava', 'häikäisevä', 'sokaiseva',
                       'sokaisevan kirkas', 'välkkyvä', 'räikeä', 'kirkasvärinen', 'kristallinkirkas', 'seesteinen'],

            'Feeble': ['voimaton', 'heikko', 'kykenemätön', 'avuton', 'raihnainen', 'tutiseva', 'heiveröinen', 'hauras',
                       'veltto'],

            'Strong': ['vahva', 'rohkea', 'luotettava', 'urhea', 'vankka', 'tukeva', 'väkevä', 'lihaksikas', 'voimakas',
                       'jykevä',
                       'roteva', 'jämerä', 'kestävä', 'vanttera', 'hyökkäykseen sopimaton'],

            'Masculine': ['maskuliini', 'masculine'],

            'Feminine': ['naisellinen', 'naismainen', 'naisen', 'feminiininen'],

            'Passive': ['passiivinen', 'toimeton', 'alistuva', 'rauhanomainen'],

            'Active': ['aktiivinen', 'toimelias', 'yritteliäs', 'toimiva', 'osallistuva', 'aktiivi', 'taisteluvalmis',
                       'taisteleva'],

            'Quiet': ['hiljainen', 'ääneen lausumaton', 'sanaton', 'äänetön', 'vaitelias', 'vaitonainen', 'vaiti oleva',
                      'vaiti',
                      'tyyni'],

            'Loud': ['äänekäs', 'kovaääninen', 'meluisa'],

            'Rough': ['karkea', 'karu', 'tyly', 'räikeä', 'huutava', 'törkeä', 'töykeä', 'huonotapainen',
                      'epäkohtelias',
                      'hiomaton', 'karhea', 'kova', 'ankara', 'julma', 'sivistymätön', 'röyhkeä', 'epätasainen',
                      'rosoinen',
                      'takkuinen'],

            'Tender': ['hellä', 'helläkätinen', 'lempeä', 'hellävarainen', 'pehmeä', 'rakastava', 'herkkä', 'arka'],

            'Sad': ['surullinen', 'alakuloinen', 'apea', 'surumielinen', 'synkkä', 'pimeä', 'ankea', 'kolkko', 'iloton',
                    'synkkämielinen', 'surkea', 'masentava', 'synkeä', 'valitettava', 'onneton', 'tyytymätön',
                    'masentunut',
                    'haikea', 'sureva', 'menettänyt', 'murheellinen'],

            'Joyful': ['iloinen', 'hilpeä', 'säteilevä', 'hyvillään', 'mielissään oleva', 'mielissään', 'aurinkoinen',
                       'eläväinen',
                       'onnellinen', 'ihastunut', 'ilahtunut', 'haltioitunut', 'ilahduttava', 'onnekas', 'tyytyväinen',
                       'riemukas',
                       'haltioissaan oleva', 'riemuisa', 'hauska', 'iloluontoinen', 'joviaali', 'optimistinen',
                       'myönteinen',
                       'hyvinvointi', 'onnellisuus'],

            'Short': ['lyhyt', 'suppea', 'tiivis', 'ytimekäs', 'kompakti', 'tiivistetty', 'lyhennetty', 'pätkä',
                      'lyhytaikainen',
                      'pieni', 'pienikokoinen', 'pikkuruinen', 'pätkä'],

            'Long': ['pitkä', 'pitkulainen', 'pitkänomainen', 'pidennetty', 'venytetty', 'kestävä', 'korkea', 'kookas'],

            'Slow': ['hidas', 'hiljainen', 'verkkainen', 'typerä', 'hidasälyinen', 'tyhmä', 'hidasjärkinen',
                     'hidasteleva',
                     'hidasjuoksuinen', 'hidasliikkeinen'],

            'Quick': ['nopea', 'ripeä', 'reipas', 'vilkas', 'pika', 'vikkelä', 'nopeakäyntinen', 'suurnopeus',
                      'pikainen',
                      'vauhdikas', 'hätiköity', 'äkillinen', 'hätäinen', 'ketterä', 'terävä', 'nokkela'],

            'Small': ['pieni', 'diminutiivinen', 'lilliputti', 'kääpiö', 'pikkuinen', 'pikkuruinen', 'lilliputtimainen',
                      'mitätön',
                      'pikku', 'vähäinen', 'vähäpätöinen', 'vaatimaton', 'pienimuotoinen', 'suppea', 'taskukokoinen',
                      'pikku',
                      'pienillä kirjaimilla kirjoitettu', 'hyvin pieni', 'olematon', 'pienen', 'pieni', 'alhainen',
                      'lyhyt'],

            'Big': ['iso', 'suuri', 'kookas', 'massiivinen', 'suunnaton', 'valtava', 'isokokoinen', 'jättimäinen',
                    'isot',
                    'suuraakkos', 'aikuinen', 'täysikasvuinen'],

            'Smooth': ['sileäl', 'kalju'],

            'Rough_or_not_smooth': ['epätasainen', 'rosoinen', 'hajanainen', 'mäkinen', 'lovettu', 'hammastettu',
                                    'särmikäs'],

            'Ugly': ['ruma', 'epäesteettinen', 'epämiellyttävä', 'törkyinen', 'likainen', 'rivo', 'kömpelö', 'suloton',
                     'tökerö'],

            'Beautiful': ['kaunis', 'ihana', 'loistava', 'sievä', 'hauskannäköinen', 'viehkeä', 'komea', 'nätti',
                          'soma',
                          'viehättävä', 'hyvännäköinen']}

# word2trans = {}
# with open('/Users/user/Downloads/ipa-dict-master/data/fi.txt', 'r', encoding='utf-8') as in_file:
#     for line in in_file.readlines():
#         word = line.split()[0].strip()
#         trans = line.split()[1].strip().replace('/', '').replace("ˈ", "").replace('ˌ', '')
#         word2trans[word] = trans
# print(word2trans)
# with open("fi_word2trans.pkl", "wb") as out_file:
#     pickle.dump(word2trans, out_file, protocol=pickle.HIGHEST_PROTOCOL)

with open("fi_word2trans.pkl", "rb") as out_file:
    word2trans = pickle.load(out_file)

# axes2vec = {}
# for item in synonyms.items():
#     sum = np.zeros((300))
#     for word in item[1]:
#         try:
#             sum += np.array(list(word2vec[word]))
#         except:
#             print(word)
#     axes2vec[item[0]] = sum
# # print(axes2vec)
#
# with open("fi_axes2vec.pkl", "wb") as out_file:
#     pickle.dump(axes2vec, out_file, protocol=pickle.HIGHEST_PROTOCOL)

with open("fi_axes2vec.pkl", "rb") as out_file:
    axes2vec = pickle.load(out_file)
# #
# word2vectrans = {}
# for word in word2vec.keys():
#     try:
#         word2vectrans[word] = (word2vec[word], word2trans[word])
#     except:
#         pass
#         # print(word)
#
# word2vectrans = {word: (np.array(list(vec)), trans)
#                  for
#                  word, (vec, trans)
#                  in
#                  word2vectrans.items()}
#
# print(word2vectrans)
#
# with open("fi_word2vectrans.pkl", "wb") as out_file:
#     pickle.dump(word2vectrans, out_file, protocol=pickle.HIGHEST_PROTOCOL)
# #
with open("fi_word2vectrans.pkl", "rb") as out_file:
    word2vectrans = pickle.load(out_file)

#
# axis = {
#     'Angular - Round': (-(axes2vec['Angular']) + axes2vec['Round']),
#     'Bad - Good': (-(axes2vec['Bad']) + axes2vec['Good']),
#     'Cold - Hot': (-(axes2vec['Cold']) + axes2vec['Hot']),
#     'Complex - Simple': (-(axes2vec['Complex']) + axes2vec['Simple']),
#     'Cowardly - Brave': (-(axes2vec['Cowardly']) + axes2vec['Brave']),
#     'Dangerous - Secure': (-(axes2vec['Dangerous']) + axes2vec['Secure']),
#     'Dark - Luminous': (-(axes2vec['Dark']) + axes2vec['Luminous']),
#     'Difficult - Easy': (-(axes2vec['Difficult']) + axes2vec['Easy']),
#     'Evil - Benign': (-(axes2vec['Evil']) + axes2vec['Benign']),
#     'Faded - Bright': (-(axes2vec['Faded']) + axes2vec['Bright']),
#     'Feeble - Strong': (-(axes2vec['Feeble']) + axes2vec['Strong']),
#     'Masculine - Feminine': (-(axes2vec['Masculine']) + axes2vec['Feminine']),
#     'Passive - Active': (-(axes2vec['Passive']) + axes2vec['Active']),
#     'Quiet - Loud': (-(axes2vec['Quiet']) + axes2vec['Loud']),
#     'Rough - Tender': (-(axes2vec['Rough']) + axes2vec['Tender']),
#     'Sad - Joyful': (-(axes2vec['Sad']) + axes2vec['Joyful']),
#     'Short - Long': (-(axes2vec['Short']) + axes2vec['Round']),
#     'Slow - Quick': (-(axes2vec['Slow']) + axes2vec['Quick']),
#     'Small - Big': (-(axes2vec['Small']) + axes2vec['Big']),
#     'Smooth - Rough_or_not_smooth': (-(axes2vec['Smooth']) + axes2vec['Rough_or_not_smooth']),
#     'Ugly - Beautiful': (-(axes2vec['Ugly']) + axes2vec['Beautiful'])}
# print(axis)
#
# with open("fi_axis.pkl", "wb") as out_file:
#     pickle.dump(axis, out_file, protocol=pickle.HIGHEST_PROTOCOL)

with open("fi_axis.pkl", "rb") as out_file:
    axis = pickle.load(out_file)


# sounds = ['b', 'd', 'f', 'g', 'h', 'j', 'q', 'r', 'v', 'w', 'x', 'z', 'š', 'å', 'kk', 'k', 'll', 'l', 'ii', 'ie', 'iu',
#           'iy', 'i', 'tt', 't', 'ss', 's', 'mm', 'm', 'nn', 'n', 'pp', 'p', 'oo', 'oi', 'ou', 'o', 'ee', 'ei', 'eu',
#           'ey', 'e', 'ɑɑ', 'ɑu', 'ɑi', 'ɑ', 'øø', 'øi', 'øy', 'ø', 'ææ', 'æi', 'æy', 'æ', 'yy', 'yi', 'yø', 'y', 'uu',
#           'ui', 'uo', 'u']
#

# phones = []
#
# i = 0
# for item in word2trans.items():
#     transcription = item[1]
#     phones = []
#     while i < len(transcription):
#         char = transcription[i]
#         # print(char)
#         if char in 'bdfghjqrvwxzšå':
#             phones.append(char)
#             i += 1
#         elif char == 'k':
#             if transcription[i + 1] == 'k':
#                 phones.append('kk')
#                 i += 2
#             else:
#                 phones.append('k')
#                 i += 1
#         elif char == 't':
#             if transcription[i + 1] == 't':
#                 phones.append('tt')
#                 i += 2
#             else:
#                 phones.append('t')
#                 i += 1
#         elif char == 's':
#             if transcription[i + 1] == 's':
#                 phones.append('ss')
#                 i += 2
#             else:
#                 phones.append('s')
#                 i += 1
#         elif char == 'm':
#             if transcription[i + 1] == 'm':
#                 phones.append('mm')
#                 i += 2
#             else:
#                 phones.append('m')
#                 i += 1
#         elif char == 'l':
#             if transcription[i + 1] == 'l':
#                 phones.append('ll')
#                 i += 2
#             else:
#                 phones.append('l')
#                 i += 1
#         elif char == 'n':
#             if transcription[i + 1] == 'n':
#                 phones.append('nn')
#                 i += 2
#             else:
#                 phones.append('n')
#                 i += 1
#         elif char == 'p':
#             if transcription[i + 1] == 'p':
#                 phones.append('pp')
#                 i += 2
#             else:
#                 phones.append('p')
#                 i += 1
#         elif char == 'i':
#             if transcription[i + 1] == 'i':
#                 phones.append('ii')
#                 i += 2
#             elif transcription[i + 1] == 'e':
#                 phones.append('ie')
#                 i += 2
#             elif transcription[i + 1] == 'u':
#                 phones.append('iu')
#                 i += 2
#             elif transcription[i + 1] == 'y':
#                 phones.append('iy')
#                 i += 2
#             else:
#                 phones.append('i')
#                 i += 1
#         elif char == 'o':
#             if transcription[i + 1] == 'i':
#                 phones.append('oi')
#                 i += 2
#             elif transcription[i + 1] == 'u':
#                 phones.append('ou')
#                 i += 2
#             elif transcription[i + 1] == 'o':
#                 phones.append('oo')
#                 i += 2
#             else:
#                 phones.append('o')
#                 i += 1
#         elif char == 'e':
#             if transcription[i + 1] == 'e':
#                 phones.append('ee')
#                 i += 2
#             elif transcription[i + 1] == 'u':
#                 phones.append('eu')
#                 i += 2
#             elif transcription[i + 1] == 'y':
#                 phones.append('ey')
#                 i += 2
#             elif transcription[i + 1] == 'i':
#                 phones.append('ei')
#                 i += 2
#             else:
#                 phones.append('e')
#                 i += 1
#         elif char == 'ɑ':
#             if transcription[i + 1] == 'ɑ':
#                 phones.append('ɑɑ')
#                 i += 2
#             elif transcription[i + 1] == 'u':
#                 phones.append('ɑu')
#                 i += 2
#             elif transcription[i + 1] == 'i':
#                 phones.append('ɑi')
#                 i += 2
#             else:
#                 phones.append('ɑ')
#                 i += 1
#         elif char == 'y':
#             if transcription[i + 1] == 'y':
#                 phones.append('yy')
#                 i += 2
#             elif transcription[i + 1] == 'ø':
#                 phones.append('yø')
#                 i += 2
#             elif transcription[i + 1] == 'i':
#                 phones.append('yi')
#                 i += 2
#             else:
#                 phones.append('y')
#                 i += 1
#         elif char == 'u':
#             if transcription[i + 1] == 'u':
#                 phones.append('uu')
#                 i += 2
#             elif transcription[i + 1] == 'o':
#                 phones.append('uo')
#                 i += 2
#             elif transcription[i + 1] == 'i':
#                 phones.append('ui')
#                 i += 2
#             else:
#                 phones.append('u')
#                 i += 1
#         elif char == 'ø':
#             if transcription[i + 1] == 'ø':
#                 phones.append('øø')
#                 i += 2
#             elif transcription[i + 1] == 'y':
#                 phones.append('øy')
#                 i += 2
#             elif transcription[i + 1] == 'i':
#                 phones.append('øi')
#                 i += 2
#             else:
#                 phones.append('ø')
#                 i += 1
#         elif char == 'æ':
#             if transcription[i + 1] == 'æ':
#                 phones.append('ææ')
#                 i += 2
#             elif transcription[i + 1] == 'y':
#                 phones.append('æy')
#                 i += 2
#             elif transcription[i + 1] == 'i':
#                 phones.append('æi')
#                 i += 2
#             else:
#                 phones.append('æ')
#                 i += 1
#         else:
#             print(char)
#             i += 1
#


# with open("fi_sounds.pkl", "wb") as out_file:
#     pickle.dump(sounds, out_file, protocol=pickle.HIGHEST_PROTOCOL)

with open("fi_sounds.pkl", "rb") as out_file:
    sounds = pickle.load(out_file)

sound2word = {}

for sound in sounds:
    first_sound = []
    with_sound = []
    without_sound = []
    for word, (vec, phones) in word2vectrans.items():
        transcription = phones
        if transcription[0] == sound:
            first_sound.append(word)
        elif sound in transcription:
            with_sound.append(word)
        else:
            without_sound.append(word)
    sound2word[sound] = (first_sound, with_sound, without_sound)



cos_vec = {}
sum_vec = 0
sum_axis = 0

projection_axis = {}
for sound in sounds:
    projection_axis[sound] = {}
    for axes_name, axes_vec in axis.items():
        len_axes = np.linalg.norm(axes_vec)
        axes = axes_vec / len_axes
        axes_distributions = []
        for distribution in sound2word[sound]:
            cosine_list = []
            for word in distribution:
                word_vec = word2vectrans[word][0]
                len_vec = np.linalg.norm(word_vec)
                vec = word_vec / len_vec
                cosine_between_vectors = np.dot(vec, axes)
                cosine_list.append(cosine_between_vectors)
            axes_distributions.append(cosine_list)
        print('{} - {} Dist lens: {} {} {} Sum: {}'.format(sound, axes_name,
                                                           len(axes_distributions[0]), len(axes_distributions[1]),
                                                           len(axes_distributions[2]),
                                                           len(axes_distributions[0]) + len(
                                                               axes_distributions[1]) + len(axes_distributions[2])
                                                           ))
        projection_axis[sound][axes_name] = axes_distributions
        print(projection_axis)

with open("fi_projection_axis.pkl", "wb") as out_file:
    pickle.dump(projection_axis, out_file, protocol=pickle.HIGHEST_PROTOCOL)

with open('results.csv', 'w', newline='') as csv_file:
    fieldnames = ['phone', 'axes', 'first_with', 'with_without', 'first_without']
    csv_writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
    csv_writer.writeheader()
    for phone, axis in projection_axis.items():
        for axes_name, distributions in axis.items():
            first_sound = distributions[0]
            with_sound = distributions[1]
            without_sound = distributions[2]

            f_w = 1.0
            w_wo = 1.0
            wo_f = 1.0
            if len(first_sound) > 100 and len(with_sound) > 100:
                f_w = stats.mannwhitneyu(first_sound, with_sound)[1]
            if len(with_sound) > 100 and len(without_sound) > 100:
                w_wo = stats.mannwhitneyu(with_sound, without_sound)[1]
            if len(without_sound) > 100 and len(first_sound) > 100:
                wo_f = stats.mannwhitneyu(without_sound, first_sound)[1]
            # print('{} - {} p-value: {} {} {}'.format(phone, axes_name, f_w, w_wo, wo_f))

            wo_f_s = ''
            if wo_f < 0.001:
                wo_f_s = '+++{:.4}'.format(wo_f)
            elif wo_f < 0.01:
                wo_f_s = '++{:.4}'.format(wo_f)
            else:
                wo_f_s = '{:.4}'.format(wo_f)

            w_wo_s = ''
            if w_wo < 0.001:
                w_wo_s = '+++{:.4}'.format(w_wo)
            elif w_wo < 0.01:
                w_wo_s = '++{:.4}'.format(w_wo)
            else:
                w_wo_s = '{:.4}'.format(w_wo)

            f_w_s = ''
            if f_w < 0.001:
                f_w_s = '+++{:.4}'.format(f_w)
            elif f_w < 0.01:
                f_w_s = '++{:.4}'.format(f_w)
            else:
                f_w_s = '{:.4}'.format(f_w)

            if (wo_f < 0.001 or w_wo < 0.001) and ((np.mean(first_sound) > np.mean(without_sound)
                                                    and np.mean(with_sound) > np.mean(without_sound))
                                                   or (np.mean(first_sound) < np.mean(without_sound)
                                                       and np.mean(with_sound) < np.mean(without_sound))):
                print('{} - {} p-values: {:.4} {:.4} {:.4}'.format(phone, axes_name, f_w, wo_f, w_wo))
                plt.hist(first_sound, 100, alpha=0.5, label='first')
                plt.hist(with_sound, 100, alpha=0.5, label='with')
                plt.hist(without_sound, 100, alpha=0.5, label='without')
                plt.savefig('plots/' + phone + '__' + axes_name + '.png')
                plt.close()

            csv_writer.writerow({
                'phone': phone,
                'axes': axes_name,
                'first_without': wo_f_s,
                'with_without': w_wo_s,
                'first_with': f_w_s
            })
