import io
import numpy as np
import pickle
import scipy.stats as stats
import matplotlib.pyplot as plt
import csv


# FILE = "/Users/user/Downloads/cc.fa.300.vec"
#
#
# def load_vectors(fname):
#     fin = io.open(fname, 'r', encoding='utf-8', newline='\n', errors='ignore')
#     data = {}
#     i = 0
#     for line in fin:
#         if i < 50000:
#             tokens = line.rstrip().split(' ')
#             data[tokens[0]] = np.array(list(map(float, np.array(tokens[1:]))))
#             i += 1
#         else:
#             break
#     return data
#
#
# word2vec = load_vectors(FILE)

synonyms = {'Angular': ['زاویه باز', 'زاویه خارجی', 'زاویه', 'زاویه یاب', 'زاویهای'],

            'Round': ['گرد', 'گرَد ', 'گرد شده', 'کروی', 'دایرهای'],

            'Bad': ['بد', 'غیر دوستانه'],

            'Good': ['خوبه', 'خوب', 'خوبرو', 'خوبان'],

            'Cold': ['سرد', 'بی تفاوت'],

            'Hot': ['داغ', 'گرم', 'سوزاندن', 'گرمایش'],

            'Complex': ['پیچیده', 'سخت', 'پیچیده ترین'],

            'Simple': ['ساده'],

            'Cowardly': ['نامرد'],

            'Brave': ['شجاع', 'نترس', 'دلیرست', 'جسور'],

            'Dangerous': ['خطرناک', 'پر مخاطره', 'خطرناک ترین'],

            'Secure': ['امن', 'قابل اعتماد', 'محافظت'],

            'Dark': ['تاریک', 'سیاه', 'موهای تیره'],

            'Luminous': ['نورانی', 'شب تاب', 'نور'],

            'Difficult': ['سخت', 'سنگین', 'سخت', 'ساده نیست'],

            'Easy': ['ساده', 'ساده ترین'],

            'Evil': ['شیطان', 'شرارت', 'دردسر', 'فاجعه', 'بدبختی', 'شیطان'],

            'Benign': ['خوش خیم', 'بی ضرر', 'نرم'],

            'Faded': ['محو شد', 'تضعیف'],

            'Bright': ['روشن', 'درخشان', 'نور'],

            'Feeble': ['ضعیف', 'نحیف', 'ناچیز'],

            'Strong': ['قوی', 'قدرتمند'],

            'Masculine': ['مردانه', 'نر'],

            'Feminine': ['زنانه', 'زن'],

            'Passive': ['غیرفعال'],

            'Active': ['فعال', 'پر انرژی'],

            'Quiet': ['ساکت', 'ساکت تر'],

            'Loud': ['بلند', 'پر سر و صدا', 'صدا خور'],

            'Rough': ['خشن', 'بی ادب'],

            'Tender': ['مناقصه', 'ملایم', 'نرم', 'حساس'],

            'Sad': ['غمگین', 'سوگواری', 'دلتنگ کننده'],

            'Joyful': ['شاد', 'خوشحال'],

            'Short': ['کوتاه', 'کوچک'],

            'Long': ['طولانی'],

            'Slow': ['کند', 'تنبل', 'بی عجله'],

            'Quick': ['سریع', 'به سرعت'],

            'Small': ['کوچک', 'ناچیز', 'کم'],

            'Big': ['بزرگ', 'زیاد', 'بزرگترین', 'مقیاس'],

            'Smooth': ['صاف', 'نرم'],

            'Rough_or_not_smooth': ['پر از دست انداز', 'ناهموار'],

            'Ugly': ['زشت', 'تند و زننده', 'حال به هم زنه', 'بد'],

            'Beautiful': ['زیبا', 'با شکوه', 'فوق العاده', 'خوب', 'لذت بخش', 'شگر']}

# word2trans = {}
# with open('/Users/user/Downloads/ipa-dict-master/data/fa.txt', 'r', encoding='utf-8') as in_file:
#     for line in in_file.readlines():
#         word = line.split('/')[0].strip()
#         trans = line.split('/')[1].strip().replace('/', '')
#         # print(word)
#         # print(trans)
#         word2trans[word] = trans
# print(word2trans)
#
# with open("fa_word2trans.pkl", "wb") as out_file:
#     pickle.dump(word2trans, out_file, protocol=pickle.HIGHEST_PROTOCOL)

with open("fa_word2trans.pkl", "rb") as out_file:
    word2trans = pickle.load(out_file)

# axes2vec = {}
# for item in synonyms.items():
#     sum = np.zeros((300))
#     for word in item[1]:
#         try:
#             sum += np.array(list(word2vec[word]))
#         except:
#             print(word)
#     axes2vec[item[0]] = sum
# print(axes2vec)
#
# with open("fa_axes2vec.pkl", "wb") as out_file:
#     pickle.dump(axes2vec, out_file, protocol=pickle.HIGHEST_PROTOCOL)
#
with open("fa_axes2vec.pkl", "rb") as out_file:
    axes2vec = pickle.load(out_file)
#
# word2vectrans = {}
# for word in word2trans.keys():
#     try:
#         word2vectrans[word] = (word2vec[word], word2trans[word])
#     except:
#         # pass
#         print(word)
#
# word2vectrans = {word: (np.array(list(vec)), trans)
#                  for
#                  word, (vec, trans)
#                  in
#                  word2vectrans.items()}
#
# print(word2vectrans)
# with open("fa_word2vectrans.pkl", "wb") as out_file:
#     pickle.dump(word2vectrans, out_file, protocol=pickle.HIGHEST_PROTOCOL)

with open("fa_word2vectrans.pkl", "rb") as out_file:
    word2vectrans = pickle.load(out_file)

#
axis = {
    'Angular - Round': (-(axes2vec['Angular']) + axes2vec['Round']),
    'Bad - Good': (-(axes2vec['Bad']) + axes2vec['Good']),
    'Cold - Hot': (-(axes2vec['Cold']) + axes2vec['Hot']),
    'Complex - Simple': (-(axes2vec['Complex']) + axes2vec['Simple']),
    'Cowardly - Brave': (-(axes2vec['Cowardly']) + axes2vec['Brave']),
    'Dangerous - Secure': (-(axes2vec['Dangerous']) + axes2vec['Secure']),
    'Dark - Luminous': (-(axes2vec['Dark']) + axes2vec['Luminous']),
    'Difficult - Easy': (-(axes2vec['Difficult']) + axes2vec['Easy']),
    'Evil - Benign': (-(axes2vec['Evil']) + axes2vec['Benign']),
    'Faded - Bright': (-(axes2vec['Faded']) + axes2vec['Bright']),
    'Feeble - Strong': (-(axes2vec['Feeble']) + axes2vec['Strong']),
    'Masculine - Feminine': (-(axes2vec['Masculine']) + axes2vec['Feminine']),
    'Passive - Active': (-(axes2vec['Passive']) + axes2vec['Active']),
    'Quiet - Loud': (-(axes2vec['Quiet']) + axes2vec['Loud']),
    'Rough - Tender': (-(axes2vec['Rough']) + axes2vec['Tender']),
    'Sad - Joyful': (-(axes2vec['Sad']) + axes2vec['Joyful']),
    'Short - Long': (-(axes2vec['Short']) + axes2vec['Round']),
    'Slow - Quick': (-(axes2vec['Slow']) + axes2vec['Quick']),
    'Small - Big': (-(axes2vec['Small']) + axes2vec['Big']),
    'Smooth - Rough_or_not_smooth': (-(axes2vec['Smooth']) + axes2vec['Rough_or_not_smooth']),
    'Ugly - Beautiful': (-(axes2vec['Ugly']) + axes2vec['Beautiful'])}
print(axis)

with open("fa_axis.pkl", "wb") as out_file:
    pickle.dump(axis, out_file, protocol=pickle.HIGHEST_PROTOCOL)

# with open("fa_axis.pkl", "rb") as out_file:
#     axis = pickle.load(out_file)
#
# phones = ['æ', 'ɒː', 'iː', 'o', 'uː', 'ej', 'e', 'i', 'u', 'p', 'ʔ', 'b', 't', 'd', 'k', 'ɡ', 't͡ʃ', 'd͡ʒ', 'f',
# 'v', 's', 'z', 'ʃ', 'ʒ', 'x', 'ɢ', 'h', 'm', 'n', 'l', 'r', 'j', 'ɾ', 'ŝ', 'æː']
# phones = []
# tr = []
# i = 0
# for item in word2vectrans.items():
#     transcription = item[1][1]
#     while i < len(transcription):
#         char = transcription[i]
#         # print(char)
#         if char in 'opʔbkɡfvszʃʒxɢhmnlrjɾŝ':
#             phones.append(char)
#             i += 1
#
#         elif char == 'd':
#             if transcription[i + 1] == '͡ ' and transcription[i + 2] == 'ʒ':
#                 phones.append('d͡ʒ')
#                 i += 3
#             else:
#                 phones.append('d')
#                 i += 1
#         elif char == 't':
#             if transcription[i + 1] == '͡' and transcription[i + 2] == 'ʃ':
#                 phones.append('t͡ʃ')
#                 i += 3
#             else:
#                 phones.append('t')
#                 i += 1
#         elif char == 'e':
#             if transcription[i + 1] == 'j':
#                 phones.append('ej')
#                 i += 2
#             else:
#                 phones.append('e')
#                 i += 1
#         elif char == 'i':
#             if transcription[i + 1] == 'ː':
#                 phones.append('iː')
#                 i += 2
#             else:
#                 phones.append('i')
#                 i += 1
#         elif char == 'u':
#             if transcription[i + 1] == 'ː':
#                 phones.append('uː')
#                 i += 2
#             else:
#                 phones.append('u')
#                 i += 1
#         elif char == 'ɒ':
#             if transcription[i + 1] == 'ː':
#                 phones.append('ɒː')
#                 i += 2
#         elif char == 'æ':
#             if transcription[i + 1] == 'ː':
#                 phones.append('æː')
#                 i += 2
#             else:
#                 phones.append('æ')
#                 i += 1
#         else:
#             print(char)
#             print(transcription)
#             i += 1
# print(phones)
# sounds = []
# for item in word2vectrans.items():
#     transcription = item[1][1]
#     try:
#         sounds += transcription
#     except:
#         print(transcription)
# sounds = list(set(sounds))
# print(sounds)
# with open("fa_sounds.pkl", "wb") as out_file:
#     pickle.dump(phones, out_file, protocol=pickle.HIGHEST_PROTOCOL)
#
with open("fa_sounds.pkl", "rb") as out_file:
    sounds = pickle.load(out_file)

sound2word = {}

for sound in sounds:
    first_sound = []
    with_sound = []
    without_sound = []
    for word, (vec, phones) in word2vectrans.items():
        transcription = phones
        if transcription[0] == sound:
            first_sound.append(word)
        elif sound in transcription:
            with_sound.append(word)
        else:
            without_sound.append(word)
    sound2word[sound] = (first_sound, with_sound, without_sound)

cos_vec = {}
sum_vec = 0
sum_axis = 0

projection_axis = {}
for sound in sounds:
    projection_axis[sound] = {}
    for axes_name, axes_vec in axis.items():
        len_axes = np.linalg.norm(axes_vec)
        axes = axes_vec / len_axes
        axes_distributions = []
        for distribution in sound2word[sound]:
            cosine_list = []
            for word in distribution:
                word_vec = word2vectrans[word][0]
                len_vec = np.linalg.norm(word_vec)
                vec = word_vec / len_vec
                cosine_between_vectors = np.dot(vec, axes)
                cosine_list.append(cosine_between_vectors)
            axes_distributions.append(cosine_list)
        print('{} - {} Dist lens: {} {} {} Sum: {}'.format(sound, axes_name,
                                                           len(axes_distributions[0]), len(axes_distributions[1]),
                                                           len(axes_distributions[2]),
                                                           len(axes_distributions[0]) + len(
                                                               axes_distributions[1]) + len(axes_distributions[2])
                                                           ))
        projection_axis[sound][axes_name] = axes_distributions
        print(projection_axis)
with open("fa_projection_axis.pkl", "wb") as out_file:
    pickle.dump(projection_axis, out_file, protocol=pickle.HIGHEST_PROTOCOL)
#
with open('results.csv', 'w', newline='') as csv_file:
    fieldnames = ['phone', 'axes', 'first_with', 'with_without', 'first_without']
    csv_writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
    csv_writer.writeheader()
    for phone, axis in projection_axis.items():
        for axes_name, distributions in axis.items():
            first_sound = distributions[0]
            with_sound = distributions[1]
            without_sound = distributions[2]

            f_w = 1.0
            w_wo = 1.0
            wo_f = 1.0
            if len(first_sound) > 100 and len(with_sound) > 100:
                f_w = stats.mannwhitneyu(first_sound, with_sound)[1]
            if len(with_sound) > 100 and len(without_sound) > 100:
                w_wo = stats.mannwhitneyu(with_sound, without_sound)[1]
            if len(without_sound) > 100 and len(first_sound) > 100:
                wo_f = stats.mannwhitneyu(without_sound, first_sound)[1]
            # print('{} - {} p-value: {} {} {}'.format(phone, axes_name, f_w, w_wo, wo_f))

            wo_f_s = ''
            if wo_f < 0.001:
                wo_f_s = '+++{:.4}'.format(wo_f)
            elif wo_f < 0.01:
                wo_f_s = '++{:.4}'.format(wo_f)
            else:
                wo_f_s = '{:.4}'.format(wo_f)

            w_wo_s = ''
            if w_wo < 0.001:
                w_wo_s = '+++{:.4}'.format(w_wo)
            elif w_wo < 0.01:
                w_wo_s = '++{:.4}'.format(w_wo)
            else:
                w_wo_s = '{:.4}'.format(w_wo)

            f_w_s = ''
            if f_w < 0.001:
                f_w_s = '+++{:.4}'.format(f_w)
            elif f_w < 0.01:
                f_w_s = '++{:.4}'.format(f_w)
            else:
                f_w_s = '{:.4}'.format(f_w)

            if f_w > 0.01 and wo_f < 0.001 and w_wo < 0.001 and \
                    ((np.mean(first_sound) > np.mean(without_sound) and np.mean(with_sound) > np.mean(without_sound)) or
                     (np.mean(first_sound) < np.mean(without_sound) and np.mean(with_sound) < np.mean(without_sound))):
                print('{} - {} p-values: {:.4} {:.4} {:.4}'.format(phone, axes_name, f_w, wo_f, w_wo))
                plt.hist(first_sound, 100, alpha=0.5, label='first')
                plt.hist(with_sound, 100, alpha=0.5, label='with')
                plt.hist(without_sound, 100, alpha=0.5, label='without')
                plt.savefig('plots/' + phone + '__' + axes_name + '.png')
                plt.close()

            csv_writer.writerow({
                'phone': phone,
                'axes': axes_name,
                'first_without': wo_f_s,
                'with_without': w_wo_s,
                'first_with': f_w_s
            })
